1. Cluster Members

root@vm-01:/usr/local/consul# consul members -detailed
Node   Address            Status  Tags
vm-01  172.17.8.101:8301  alive   build=0.7.4:'1c442cb,dc=dc1,id=f14adaaa-5f72-4cc9-a2c0-d3838f24a90d,port=8300,role=consul,vsn=2,vsn_max=3,vsn_min=2

The output of the members command is based on the gossip protocol and is eventually consistent

2. HTTP API as it forwards the request to the Consul servers

That is, at any point in time, the view of the world as seen by your local agent may not exactly match the state on the
servers. For a strongly consistent view of the world, use the HTTP API as it forwards the request to the Consul servers:

curl localhost:8500/v1/catalog/nodes
[
    {
        "ID": "f14adaaa-5f72-4cc9-a2c0-d3838f24a90d",
        "Node": "vm-01",
        "Address": "172.17.8.101",
        "TaggedAddresses": {
            "lan": "172.17.8.101",
            "wan": "172.17.8.101"
        },
        "Meta": {},
        "CreateIndex": 4,
        "ModifyIndex": 5
    }
]

3. DNS interface can be used to query the node

root@vm-01:/usr/local/consul# dig @127.0.0.1 -p 8600 vm-01.node.consul

; <<>> DiG 9.9.5-3ubuntu0.11-Ubuntu <<>> @127.0.0.1 -p 8600 vm-01.node.consul
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 11607
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;vm-01.node.consul.		IN	A

;; ANSWER SECTION:
vm-01.node.consul.	0	IN	A	172.17.8.101

;; Query time: 4 msec
;; SERVER: 127.0.0.1#8600(127.0.0.1)
;; WHEN: Mon Feb 13 05:46:59 UTC 2017
;; MSG SIZE  rcvd: 51


4. Defining a Service

A service can be registered either by providing a service definition or by making the appropriate calls to the HTTP API
(https://www.consul.io/docs/agent/http.html)

5. Querying Services

Once the agent is started and the service is synced, we can query the service using either the DNS or HTTP API.

5.1 DNS API

### For the DNS API, the DNS name for services is NAME.service.consul

root@vm-01:/usr/local/consul/consul.d# dig @127.0.0.1 -p 8600 web.service.consul

; <<>> DiG 9.9.5-3ubuntu0.11-Ubuntu <<>> @127.0.0.1 -p 8600 web.service.consul
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 11177
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;web.service.consul.		IN	A

;; ANSWER SECTION:
web.service.consul.	0	IN	A	172.17.8.101

;; Query time: 5 msec
;; SERVER: 127.0.0.1#8600(127.0.0.1)
;; WHEN: Mon Feb 13 06:36:11 UTC 2017
;; MSG SIZE  rcvd: 52

### or use below cmd to get SRV info

root@vm-01:/usr/local/consul/consul.d# dig @127.0.0.1 -p 8600 web.service.consul SRV

; <<>> DiG 9.9.5-3ubuntu0.11-Ubuntu <<>> @127.0.0.1 -p 8600 web.service.consul SRV
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 54226
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;web.service.consul.		IN	SRV

;; ANSWER SECTION:
web.service.consul.	0	IN	SRV	1 1 8002 vm-01.node.dc1.consul.

;; ADDITIONAL SECTION:
vm-01.node.dc1.consul.	0	IN	A	172.17.8.101

;; Query time: 4 msec
;; SERVER: 127.0.0.1#8600(127.0.0.1)
;; WHEN: Mon Feb 13 06:46:42 UTC 2017
;; MSG SIZE  rcvd: 87

### Finally, we can also use the DNS API to filter services by tags:

root@vm-01:/usr/local/consul/consul.d# dig @127.0.0.1 -p 8600 django.web.service.consul SRV

; <<>> DiG 9.9.5-3ubuntu0.11-Ubuntu <<>> @127.0.0.1 -p 8600 django.web.service.consul SRV
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 61581
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;django.web.service.consul.	IN	SRV

;; ANSWER SECTION:
django.web.service.consul. 0	IN	SRV	1 1 8002 vm-01.node.dc1.consul.

;; ADDITIONAL SECTION:
vm-01.node.dc1.consul.	0	IN	A	172.17.8.101

;; Query time: 5 msec
;; SERVER: 127.0.0.1#8600(127.0.0.1)
;; WHEN: Mon Feb 13 06:48:31 UTC 2017
;; MSG SIZE  rcvd: 94


5.2 HTTP API

### The catalog API gives all nodes hosting a given service

root@vm-01:/usr/local/consul/consul.d# curl http://localhost:8500/v1/catalog/service/web
[
    {
        "ID": "f14adaaa-5f72-4cc9-a2c0-d3838f24a90d",
        "Node": "vm-01",
        "Address": "172.17.8.101",
        "TaggedAddresses": {
            "lan": "172.17.8.101",
            "wan": "172.17.8.101"
        },
        "NodeMeta": {},
        "ServiceID": "web",
        "ServiceName": "web",
        "ServiceTags": [
            "django"
        ],
        "ServiceAddress": "",
        "ServicePort": 8002,
        "ServiceEnableTagOverride": false,
        "CreateIndex": 6,
        "ModifyIndex": 6
    }
]

### you'll typically want to query just for healthy instances where the checks are passing

root@vm-01:/usr/local/consul/consul.d#  curl 'http://localhost:8500/v1/health/service/web?passing'
[
    {
        "Node": {
            "ID": "f14adaaa-5f72-4cc9-a2c0-d3838f24a90d",
            "Node": "vm-01",
            "Address": "172.17.8.101",
            "TaggedAddresses": {
                "lan": "172.17.8.101",
                "wan": "172.17.8.101"
            },
            "Meta": {},
            "CreateIndex": 4,
            "ModifyIndex": 5
        },
        "Service": {
            "ID": "web",
            "Service": "web",
            "Tags": [
                "django"
            ],
            "Address": "",
            "Port": 8002,
            "EnableTagOverride": false,
            "CreateIndex": 6,
            "ModifyIndex": 6
        },
        "Checks": [
            {
                "Node": "vm-01",
                "CheckID": "serfHealth",
                "Name": "Serf Health Status",
                "Status": "passing",
                "Notes": "",
                "Output": "Agent alive and reachable",
                "ServiceID": "",
                "ServiceName": "",
                "CreateIndex": 4,
                "ModifyIndex": 4
            }
        ]
    }
]


6. Updating Services

Service definitions can be updated by changing configuration files and sending a SIGHUP to the agent. This lets you
update services without any downtime or unavailability to service queries.Alternatively, the HTTP API can be used to
add, remove, and modify services dynamically.